
    #[test]
    fn selection_test_0 () {
        let answer: Vec<usize> =
        "4 23 42 62 76 98 112 134 145 161 176 196 210 230 241 254 266 280 296 312 333 345 355 375 391 405 419 436 451 461 474 488 502 517 533 554 570 592 616 638 658 680 687 711 723 742 763 777 797 809 816 826 845 858 880 891 905 923 935 949 961 981 992 1003 1013 1035 1054 1069 1085 1096 1115 1134 1156 1163 1175 1185 1196 1215 1237 1254 1266 1288 1299 1311 1321 1337 1348 1365 1379 1386 1399 1420 1434 1444 1459 1475 1489 1504 1523 1537 1561 1576 1583 1598 1612 1631 1650 1665 1684 1706 1727 1751 1767"
        .split(" ").map(|x| x.parse::<usize>().unwrap()).collect();
        assert_eq!(get_selection_index("name CA"),answer);
    }
    
    #[test]
    fn selection_test_1 () {
        let answer: Vec<usize> =
        "143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 31573 31574 31575"
        .split(" ").map(|x| x.parse::<usize>().unwrap()).collect();
        assert_eq!(get_selection_index("resid 10"),answer);
    }
    
    #[test]
    fn selection_test_2 () {
        let answer: Vec<usize> =
        "143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158"
        .split(" ").map(|x| x.parse::<usize>().unwrap()).collect();
        assert_eq!(get_selection_index("same residue as (name CA and resid 10)"),answer);
    }
    
    #[test]
    fn selection_test_3 () {
        let answer: Vec<usize> =
        "100 101 102 103 104 105 106 107 108 109 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 172 173 174 175 189 283 295 308 309 310 311 312 313 314 316 317 318 319 320 322 325 327 329 330 331 332 335 336 338 339 340 1633 1634 1635 1636 1637 1638 1641 1646 1647 1648 1649 1650 1651 1652 1653 1657 1661 1662 1663 1664 1665 1666 1667 1669 1670 1671 1672 1673 1674 1675 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1694 1702 1703 1789 1790 1791 1793 1794 1795 1796 1799 1800 2224 2225 2226 2410 2411 2412 2911 2912 2913 3122 3124 3125 3126 7540 7541 7542 8674 8675 8676 10153 10154 10155 10288 10289 10290 13369 13370 13371 13711 13713 16200 18583 18584 18585 19846 20446 20447 20448 20662 20663 20664 21352 21353 21354 28264 28265 28266 31380 31573 31574 31575 33829 33830 33831 34510 34511 34512 34855 34857 35270 36316 36317 36318 38432 40169 40170 42640 42641 42642 43410 44962 44963 44964 47572 47573 47574 47854 47855 47856 48874 48875 48876 49276 49277 49278 49714 49715 49716 49873 49875 51682 51683 51684 54106 54107 54108 55348 55349 55350"
        .split(" ").map(|x| x.parse::<usize>().unwrap()).collect();
        assert_eq!(get_selection_index("within 0.5 of resid 10"),answer);
    }
    
    #[test]
    fn selection_test_4 () {
        let answer: Vec<usize> =
        "156 274 280 281 283 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 332 1188 1216 1218 1220 1222 1223 1224 1228 1792 1795 9001 9002 9003 15178 15179 15180 15395 23467 23468 25422 31603 31604 31605 33829 33831 41587 41588 41594 43951 43952 54054 55381 55383"
        .split(" ").map(|x| x.parse::<usize>().unwrap()).collect();
        assert_eq!(get_selection_index("within 0.3 of resid 20"),answer);
    }
    
