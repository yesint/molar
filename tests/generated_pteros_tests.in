
    #[test]
    fn selection_pteros_test_0 () {
        let answer: Vec<usize> = vec![4, 23, 42, 62, 76, 91, 102, 121, 128, 145, 152, 166, 186, 200, 222, 241, 261, 283, 290, 306, 330, 354, 369, 385, 392, 404, 425, 432, 449, 468, 485, 500, 514, 529, 545, 564, 583, 605, 621, 640, 652, 674, 684, 701, 725, 739, 760, 771, 786, 797, 817, 837, 852, 862, 872, 883, 900, 917, 928, 950, 969, 980, 997, 1019, 1036, 1055, 1071, 1090, 1104, 1125, 1132, 1148, 1159, 1179, 1190, 1197, 1209, 1224, 1238, 1257, 1276, 1292, 1309, 1324, 1344, 1360, 1382, 1402, 1409, 1420, 1439, 1451, 1465, 1486, 1505, 1527, 1549, 1563, 1585, 1599, 1610, 1629, 1643, 1662, 1681, 1705, 1727, 1746, 1761, 1777, 1787, 1809, 1826, 1845, 1855, 1879, 1889, 1906, 1923, 1943, 1962, 1977, 1992, 2006, 2020, 2039, 2058, 2075, 2082, 2096, 2112, 2123, 2133, 2155, 2169, 2188, 2207, 2226, 2245, 2269, 2284, 2299, 2311, 2335, 2357, 2371, 2378, 2394, 2408, 2420, 2440, 2459, 2481, 2500, 2511, 2525, 2537, 2544, 2563, 2574, 2593, 2607, 2623, 2644, 2656, 2678, 2690, 2709, 2728, 2745, 2760, 2784, 2805, 2817, 2841, 2859, 2873, 2885, 2900, 2911, 2930, 2945, 2961, 2973, 2995, 3009, 3028, 3042, 3061, 3071, 3085, 3097, 3119, 3143, 3154, 3174, 3181, 3195, 3209, 3228, 3252, 3267, 3286, 3297, 3308, 3315, 3322, 3334, 3358, 3370, 3389, 3400, 3410, 3429, 3441, 3452, 3469, 3493, 3515, 3534, 3551, 3571, 3592, 3607, 3619, 3643, 3660, 3677, 3698, 3710, 3722, 3734, 3756, 3780, 3790, 3805, 3824, 3834, 3848, 3867, 3886, 3900, 3914, 3925, 3942, 3954, 3975, 3992, 4004, 4016, 4036, 4062, 4074, 4085, 4105, 4129, 4139, 4158, 4177, 4201, 4213, 4232, 4246, 4257, 4276];
        assert_eq!(get_selection_index2("name CA"),answer);
    }
    
    #[test]
    fn selection_pteros_test_1 () {
        let answer: Vec<usize> = vec![150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163];
        assert_eq!(get_selection_index2("resid 555"),answer);
    }
    
    #[test]
    fn selection_pteros_test_2 () {
        let answer: Vec<usize> = vec![150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163];
        assert_eq!(get_selection_index2("same residue as (name CA and resid 555)"),answer);
    }
    
    #[test]
    fn selection_pteros_test_3 () {
        let answer: Vec<usize> = vec![141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 236, 2150, 2542, 2543, 2544, 2546, 2547, 2548, 2549, 2550, 2551, 2552, 2553, 2554, 2555, 2557, 2558, 2559, 2560, 2628, 2629, 2630, 2631, 2632, 2633, 2634, 2635, 2636, 2637, 2694, 2696, 2697, 2771, 2773, 2774, 2775, 2776, 2777, 2778, 2779];
        assert_eq!(get_selection_index2("within 0.5 of resid 555"),answer);
    }
    
    #[test]
    fn selection_pteros_test_4 () {
        let answer: Vec<usize> = vec![141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 236, 2150, 2542, 2543, 2544, 2546, 2547, 2548, 2549, 2550, 2551, 2552, 2553, 2554, 2555, 2557, 2558, 2559, 2560, 2628, 2629, 2630, 2631, 2632, 2633, 2634, 2635, 2636, 2637, 2694, 2696, 2697, 2771, 2773, 2774, 2775, 2776, 2777, 2778, 2779];
        assert_eq!(get_selection_index2("within 0.5 pbc yyy of resid 555"),answer);
    }
    