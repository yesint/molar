# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import datetime
import typing

class FileHandler:
    stats: FileStats
    file_name: builtins.str
    def __new__(cls,fname:builtins.str): ...
    def read(self) -> tuple[Topology, State]:
        ...

    def read_topology(self) -> Topology:
        ...

    def read_state(self) -> State:
        ...

    def write(self, data:typing.Any) -> None:
        ...

    def write_topology(self, data:typing.Any) -> None:
        ...

    def write_state(self, data:typing.Any) -> None:
        ...

    def __iter__(self) -> FileHandler:
        ...

    def __next__(self) -> typing.Optional[typing.Any]:
        ...

    def skip_to_frame(self, fr:builtins.int) -> None:
        ...

    def skip_to_time(self, t:builtins.float) -> None:
        ...

    def tell_first(self) -> tuple[builtins.int, builtins.float]:
        ...

    def tell_current(self) -> tuple[builtins.int, builtins.float]:
        ...

    def tell_last(self) -> tuple[builtins.int, builtins.float]:
        ...


class FileStats:
    elapsed_time: datetime.timedelta
    frames_processed: builtins.int
    cur_t: builtins.float
    def __repr__(self) -> builtins.str:
        ...

    def __str__(self) -> builtins.str:
        ...


class ParticleIterator:
    def __iter__(self) -> ParticleIterator:
        ...

    def __next__(self) -> typing.Optional[typing.Any]:
        ...


class PeriodicBox:
    ...

class Sel:
    ...

class Source:
    ...


class State:
    time: builtins.float
    box: PeriodicBox
    def __len__(self) -> builtins.int:
        ...

    def set_box(self, val:PeriodicBox) -> None:
        ...


class Topology:
    ...

def greeting() -> None:
    ...
